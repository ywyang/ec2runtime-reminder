AWSTemplateFormatVersion: "2010-09-09"
Description: 'CloudFormation Template for DynamoDB Table'

Parameters:
  TableName:
    Type: String
    AllowedPattern: "[a-zA-Z0-9_]{3,}"
    Description: Name for the DynamoDB Table Table name must be at least 3 characters long
  AlertEC2Type:
    Type: String
    Description: Instance Type for the Alert
  AlertRunDays:
    Type: String
    Description: Max Run Days

Resources:
  MyDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableName
      AttributeDefinitions:
        - AttributeName: ec2type
          AttributeType: S
        - AttributeName: maxrundays
          AttributeType: N
      KeySchema:
        - AttributeName: ec2type
          KeyType: HASH
        - AttributeName: maxrundays
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 3
        WriteCapacityUnits: 3
  MyLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws-cn:iam::aws:policy/AmazonDynamoDBFullAccess'
        - 'arn:aws-cn:iam::aws:policy/AmazonSNSFullAccess'
  MyCustomResourceLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Runtime: python3.11
      Handler: index.lambda_handler
      Role: !GetAtt MyLambdaExecutionRole.Arn
      Environment:
        Variables:
          tableName: !Ref TableName
          ec2type: !Ref AlertEC2Type
          maxrundays: !Ref AlertRunDays
      Code: 
        ZipFile: |
          import boto3
          import os
          import urllib3
          import json
          from botocore.vendored import requests


          SUCCESS = "SUCCESS"
          FAILED = "FAILED"

          def cfnsend(event, context, responseStatus, responseData, physicalResourceId=None, noEcho=False):
              responseUrl = event['ResponseURL']

              print(responseUrl)

              responseBody = {}
              responseBody['Status'] = responseStatus
              responseBody['Reason'] = 'See the details in CloudWatch Log Stream: ' + context.log_stream_name
              responseBody['PhysicalResourceId'] = physicalResourceId or context.log_stream_name
              responseBody['StackId'] = event['StackId']
              responseBody['RequestId'] = event['RequestId']
              responseBody['LogicalResourceId'] = event['LogicalResourceId']
              responseBody['NoEcho'] = noEcho
              responseBody['Data'] = responseData

              json_responseBody = json.dumps(responseBody)

              print("Response body:\n" + json_responseBody)

              headers = {
                  'content-type' : '',
                  'content-length' : str(len(json_responseBody))
              }

              try:
                  response = requests.put(responseUrl,
                                          data=json_responseBody,
                                          headers=headers)
                  print("Status code: " + response.reason)
              except Exception as e:
                  print("send(..) failed executing requests.put(..): " + str(e))


          def lambda_handler(event, context):
              # Initialize DynamoDB client
              dynamodb = boto3.resource('dynamodb')
              
              # Extract table name and items from event
              table_name = os.environ.get('tableName')
              ec2type = os.environ.get('ec2type')
              maxrundays = os.environ.get('maxrundays')

              item = {
                "ec2type": ec2type,
                "maxrundays": int(maxrundays)
              }
              
              # Get a reference to the DynamoDB table
              table = dynamodb.Table(table_name)
              # Insert item into the DynamoDB table
              table.put_item(Item=item)

              responseData = {}
              responseData['Data'] = 'Items inserted successfully into {table_name}.'
              cfnsend(event, context, SUCCESS, responseData, "CustomResourcePhysicalID")


              return {
                  'statusCode': 200,
                  'body': f'Items inserted successfully into {table_name}.'
              }

      Timeout: 30
  InvokeInitDBLambdaOnce:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: MyCustomResourceLambdaFunction
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt MyCustomResourceLambdaFunction.Arn
      Payload: {'runonce':'1'}
      FunctionName: randomerror
Outputs:
  DynamoDBTableName:
    Value: !Ref MyDynamoDBTable
    Description: Name of the created DynamoDB table

