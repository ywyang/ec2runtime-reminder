AWSTemplateFormatVersion: "2010-09-09"
Description: 'CloudFormation Template for DynamoDB Table'

Parameters:
  TableName:
    Type: String
    AllowedPattern: "[a-zA-Z0-9_]{3,}"
    Description: Name for the DynamoDB Table Table name must be at least 3 characters long
  AlertEC2Type:
    Type: String
    Description: Instance Type for the Alert
  AlertRunDays:
    Type: String
    Description: Max Run Days

Resources:
  MyDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableName
      AttributeDefinitions:
        - AttributeName: ec2type
          AttributeType: S
        - AttributeName: maxrundays
          AttributeType: N
      KeySchema:
        - AttributeName: ec2type
          KeyType: HASH
        - AttributeName: maxrundays
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 3
        WriteCapacityUnits: 3
  MyLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws-cn:iam::aws:policy/AmazonDynamoDBFullAccess'
        - 'arn:aws-cn:iam::aws:policy/AmazonSNSFullAccess'
  MyCustomResourceLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Runtime: nodejs16.x
      Handler: index.handler
      Role: !GetAtt MyLambdaExecutionRole.Arn
      Environment:
        Variables:
          tableName: !Ref TableName
          ec2type: !Ref AlertEC2Type
          maxrundays: !Ref AlertRunDays
      Code: 
        ZipFile: |
          var response = require('cfn-response');
          var AWS = require("aws-sdk");

          // Create a new DynamoDB instance


          exports.handler = function(event, context) {
            AWS.config.update({region: "cn-northwest-1"})
            var dynamoDB = new AWS.DynamoDB({ apiVersion: "2012-08-10" });

                // Fetch environment variables
                const { tableName, ec2type, maxrundays } = process.env;
                
                // Create an item to be inserted into the DynamoDB table
                var params = {
                    TableName: tableName,
                    Item: {
                        ec2type: { S: ec2type },
                        maxrundays:{ N: maxrundays},
                    },
                };
                
                // Insert the item into the DynamoDB table
                dynamoDB.putItem(params,function (err, data) {
                  if (err) {
                    console.log("Error", err);
                    var responseData = {Value:  'Item inserted error.'};
                    response.send(event, context, response.FAILED, responseData);

                  } else {
                    console.log("Success", data);
                    var responseData = {Value:  'Item inserted successfully.'};
                    response.send(event, context, response.SUCCESS, responseData);
                          

                  }
                });


                // Return success response
                return {
                    statusCode: 200,
                    body: JSON.stringify({ message: 'Item inserted successfully.' })

                };
           
          };

      Timeout: 30
  InvokeInitDBLambdaOnce:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: MyCustomResourceLambdaFunction
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt MyCustomResourceLambdaFunction.Arn
      Payload: {'runonce':'1'}
      FunctionName: randomerror
Outputs:
  DynamoDBTableName:
    Value: !Ref MyDynamoDBTable
    Description: Name of the created DynamoDB table
